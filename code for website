Css files
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

/* styles/globals.css */

/* Basic reset */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: Arial, sans-serif;
  padding: 20px;
}

/* Container for products and cart */
.container {
  display: flex;
  gap: 40px;
}

.product-list {
  width: 60%;
}

.cart {
  width: 30%;
  border: 1px solid #ccc;
  padding: 10px;
}

/* Product Card */
.product-card {
  border: 1px solid #ccc;
  padding: 10px;
  margin-bottom: 10px;
  text-align: center;
}

/* Glowing "Add to Cart" Button */
button {
  background-color: #0070f3;
  color: #fff;
  border: none;
  padding: 10px 20px;
  cursor: pointer;
  font-size: 16px;
  border-radius: 5px;
  position: relative;
  transition: background-color 0.3s;
  overflow: hidden;
}

/* Glowing effect */
button::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.6) 10%, transparent 30%);
  opacity: 0;
  transition: opacity 0.5s, transform 0.5s;
  transform: scale(0);
  border-radius: 5px;
}

button:hover::after {
  opacity: 0.7;
  transform: scale(1.2);
}

button:hover {
  background-color: #005bb5;
  box-shadow: 0 0 10px #0070f3, 0 0 20px #0070f3, 0 0 30px #0070f3;
}

/* Glowing animation */
button::before {
  content: "";
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(45deg, #00b3ff, #0070f3, #ff4d4d);
  opacity: 0.5;
  transition: transform 0.5s;
  transform: scale(0);
  border-radius: 50%;
  filter: blur(10px);
}

button:hover::before {
  transform: scale(1);
}

/* Cart item styling */
.cart-item {
  margin-bottom: 10px;
}

and TSX file.............
  "use client";

import React, { createContext, useContext, useState } from "react";

// Context for Cart State
type Product = {
  id: number;
  name: string;
  price: number;
  quantity: number;
};

type CartContextType = {
  cart: Product[];
  addToCart: (product: Product) => void;
  removeFromCart: (id: number) => void;
};

const CartContext = createContext<CartContextType | undefined>(undefined);

const CartProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [cart, setCart] = useState<Product[]>([]);

  const addToCart = (product: Product) => {
    setCart((prevCart) => {
      const existingProduct = prevCart.find((item) => item.id === product.id);
      if (existingProduct) {
        return prevCart.map((item) =>
          item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
        );
      }
      return [...prevCart, { ...product, quantity: 1 }];
    });
  };

  const removeFromCart = (id: number) => {
    setCart((prevCart) => prevCart.filter((item) => item.id !== id));
  };

  return (
    <CartContext.Provider value={{ cart, addToCart, removeFromCart }}>
      {children}
    </CartContext.Provider>
  );
};

const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error("useCart must be used within a CartProvider");
  }
  return context;
};

// Product Card Component
const ProductCard: React.FC<Product> = ({ id, name, price }) => {
  const { addToCart } = useCart();

  return (
    <div className="product-card">
      <h3>{name}</h3>
      <p>Price: ${price}</p>
      {/* Glowing "Add to Cart" Button */}
      <button onClick={() => addToCart({ id, name, price, quantity: 1 })}>
        Add to Cart
      </button>
    </div>
  );
};

// Cart Component
const Cart: React.FC = () => {
  const { cart, removeFromCart } = useCart();

  return (
    <div className="cart" >
      <h2>Shopping Cart</h2>
      {cart.length === 0 ? (
        <p>Cart is empty</p>
      ) : (
        cart.map((item) => (
          <div key={item.id} className="cart-item">
            <p>
              {item.name} - ${item.price} x {item.quantity}
            </p>
            <button onClick={() => removeFromCart(item.id)}>Remove</button>
          </div>
        ))
      )}
    </div>
  );
};

// Home Page
const HomePage: React.FC = () => {
  const products = [
    { id: 1, name: "Product A", price: 50 },
    { id: 2, name: "Product B", price: 75 },
    { id: 3, name: "Product C", price: 100 },
  ];

  return (
    <CartProvider>
      <div className="container">
        <div className="product-list" >
          <h1>My E-commerce Store</h1>
          {products.map((product) => (
            <ProductCard key={product.id} {...product} />
          ))}
        </div>
        <Cart />
      </div>
    </CartProvider>
  );
};

export default HomePage;
